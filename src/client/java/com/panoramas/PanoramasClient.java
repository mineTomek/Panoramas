package com.panoramas;

import java.io.File;
import java.io.FileWriter;
import java.nio.file.Path;

import java.util.Collection;

import org.apache.commons.io.FileUtils;
import org.lwjgl.glfw.GLFW;

import com.google.gson.Gson;

import com.panoramas.config.ModConfig;

import me.shedaniel.autoconfig.AutoConfig;
import net.minecraft.SharedConstants;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gui.screen.pack.PackListWidget.ResourcePackEntry;
import net.minecraft.client.option.KeyBinding;
import net.minecraft.client.util.InputUtil;
import net.minecraft.client.util.ScreenshotRecorder;
import net.minecraft.resource.ResourcePackManager;
import net.minecraft.resource.ResourceType;
import net.minecraft.text.Text;
import net.minecraft.util.WorldSavePath;
import net.fabricmc.api.ClientModInitializer;
import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientTickEvents;
import net.fabricmc.fabric.api.client.keybinding.v1.KeyBindingHelper;
import net.fabricmc.loader.api.FabricLoader;

public class PanoramasClient implements ClientModInitializer {
	public KeyBinding createPanorama = KeyBindingHelper.registerKeyBinding(
			new KeyBinding("key.panoramas.create", InputUtil.Type.KEYSYM, GLFW.GLFW_KEY_H, "key.categories.misc"));

	@Override
	public void onInitializeClient() {
		ClientTickEvents.END_CLIENT_TICK.register(client -> {
			if (createPanorama.wasPressed()) {
				ModConfig config = GetConfig();

				String levelName = null;

				if (client.isInSingleplayer()) {
					levelName = client.getServer().getSavePath(WorldSavePath.ROOT).getParent().getFileName().toString();
				} else {
					levelName = client.getCurrentServerEntry().address;
				}

				String resourcepackBaseName = "Panorama_" + levelName;

				if (FabricLoader.getInstance().getGameDir().resolve("resourcepacks/"
						+ resourcepackBaseName)
						.toFile().exists()) {
					FabricLoader.getInstance().getGameDir().resolve("resourcepacks/"
							+ resourcepackBaseName)
							.toFile().delete();
				}

				Path panoramasPath = FabricLoader.getInstance().getGameDir()
						.resolve("resourcepacks/" + resourcepackBaseName
								+ "/assets/minecraft/textures/gui/title/background");

				panoramasPath.toFile().mkdirs();

				try {
					int resolution = config.resolution;

					final int size = client.getWindow().getHeight() * resolution;

					client.takePanorama(panoramasPath.toFile(), size, size);

					for (int i = 0; i < 6; i++) {
						String fileName = "panorama_" + i + ".png";
						File source = panoramasPath.resolve("screenshots/" + fileName).toFile();
						File destination = panoramasPath.resolve(fileName).toFile();

						if (destination.exists()) {
							destination.delete();
						}

						FileUtils.moveFile(source, destination);
					}

					panoramasPath.resolve("screenshots").toFile().delete();

					Path resourcePackPath = FabricLoader.getInstance().getGameDir()
							.resolve("resourcepacks/" + resourcepackBaseName);

					resourcePackPath.toFile().mkdirs();

					FileWriter mcmeta = new FileWriter(resourcePackPath.resolve("pack.mcmeta").toString());

					int resourcepackVersion = SharedConstants.getGameVersion()
							.getResourceVersion(ResourceType.CLIENT_RESOURCES);

					Pack pack = new Pack(resourcepackVersion, "Autogenerated resourcepack with your custom panorama");

					MCMeta mcmetaBuilder = new MCMeta(pack);

					mcmeta.write(new Gson().toJson(mcmetaBuilder));

					mcmeta.close();

					FileWriter panoramasFile = new FileWriter(resourcePackPath.resolve(".panoramas").toString());

					panoramasFile.write(".panoramas");

					panoramasFile.close();

					ScreenshotRecorder.takeScreenshot(client.getFramebuffer())
							.writeTo(resourcePackPath.resolve("pack.png"));
				} catch (Exception e) {
					client.player.sendMessage(Text.translatable("panoramas.error.io", e.getMessage()));
					Panoramas.LOGGER.error("IOException occurred while creating pack.mcmeta file: " + e.getMessage());
				}

				if (config.autoSetPanoramas) {
					client.getResourcePackManager().enable("file/" + resourcepackBaseName);
					client.options.refreshResourcePacks(client.getResourcePackManager());
				}

				client.player.sendMessage(Text.translatable("panoramas.create.success", config.resolution));
			}
		});
	}

	public static boolean hasPanoramaPack(String worldName) {
		return isPanoramasResourcePack("file/Panorama_" + worldName);
	}

	public static boolean isPanoramasResourcePack(ResourcePackEntry pack) {
		return isPanoramasResourcePack(pack.getName());
	}

	public static boolean isPanoramasResourcePack(String packName) {
		File panoramasIdentifier = FabricLoader.getInstance().getGameDir()
				.resolve("resourcepacks/" + packName.replace("file/", "") + "/.panoramas").toFile();
		return panoramasIdentifier.exists();
	}

	public static boolean isAnyPanoramasResourcePackLoaded() {
		ResourcePackManager manager = MinecraftClient.getInstance().getResourcePackManager();

		Collection<String> enabedPacks = manager.getEnabledNames();

		for (String pack : enabedPacks) {
			if (FabricLoader.getInstance().getGameDir()
					.resolve("resourcepacks/" + pack.replace("file/", "") + "/.panoramas")
					.toFile().exists()) {
				return true;
			}
		}

		return false;
	}

	public static boolean isPanoramasResourcePackLoaded(String packName) {
		ResourcePackManager manager = MinecraftClient.getInstance().getResourcePackManager();

		Collection<String> enabedPacks = manager.getEnabledNames();

		for (String pack : enabedPacks) {
			if (pack.replace("file/", "") != packName) continue;

			if (FabricLoader.getInstance().getGameDir()
					.resolve("resourcepacks/" + pack.replace("file/", "") + "/.panoramas")
					.toFile().exists()) {
				return true;
			}
		}

		return false;
	}

	public static ModConfig GetConfig() {
		return AutoConfig.getConfigHolder(ModConfig.class).getConfig();
	}
}